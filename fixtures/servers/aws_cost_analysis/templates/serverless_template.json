{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Sample Serverless Architecture Template for AWS CDK Cost Analysis",
  "Resources": {
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "ServerlessSampleApi",
        "Description": "Sample API for serverless architecture"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "GetItemsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        },
        "Code": {
          "ZipFile": "exports.handler = async (event) => { return { statusCode: 200, body: JSON.stringify({ items: [] }) }; };"
        },
        "Runtime": "nodejs14.x",
        "Timeout": 10,
        "MemorySize": 128
      }
    },
    "CreateItemFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        },
        "Code": {
          "ZipFile": "exports.handler = async (event) => { return { statusCode: 201, body: JSON.stringify({ success: true }) }; };"
        },
        "Runtime": "nodejs14.x",
        "Timeout": 10,
        "MemorySize": 256
      }
    },
    "ProcessItemsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]
        },
        "Code": {
          "ZipFile": "exports.handler = async (event) => { /* Process items */ };"
        },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
        "MemorySize": 512
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "TableName": "ServerlessItems"
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Join": [
            "-",
            [
              "serverless-sample-bucket",
              {
                "Ref": "AWS::AccountId"
              }
            ]
          ]
        }
      }
    },
    "ApiGatewayRootMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": {
          "Fn::GetAtt": ["ApiGateway", "RootResourceId"]
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["GetItemsFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "ItemsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": ["ApiGateway", "RootResourceId"]
        },
        "PathPart": "items",
        "RestApiId": {
          "Ref": "ApiGateway"
        }
      }
    },
    "ItemsPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "ResourceId": {
          "Ref": "ItemsResource"
        },
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": ["CreateItemFunction", "Arn"]
                },
                "/invocations"
              ]
            ]
          }
        }
      }
    },
    "ApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["ApiGatewayRootMethod", "ItemsPostMethod"],
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGateway"
        },
        "StageName": "prod"
      }
    },
    "EventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Scheduled rule to process items",
        "ScheduleExpression": "rate(1 hour)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": ["ProcessItemsFunction", "Arn"]
            },
            "Id": "ProcessItemsTarget"
          }
        ]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessItemsFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": ["EventRule", "Arn"]
        }
      }
    }
  },
  "Outputs": {
    "ApiGatewayEndpoint": {
      "Description": "Endpoint for the API Gateway",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGateway"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/prod"
          ]
        ]
      }
    }
  }
} 
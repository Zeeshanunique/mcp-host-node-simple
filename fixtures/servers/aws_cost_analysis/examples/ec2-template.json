{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2-Based Web Application Stack",
  "Parameters": {
    "EnvironmentName": {
      "Type": "String",
      "Default": "production",
      "Description": "Environment name"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t3.medium",
      "Description": "EC2 instance type",
      "AllowedValues": ["t3.micro", "t3.small", "t3.medium", "t3.large", "m5.large"]
    },
    "DatabaseInstanceType": {
      "Type": "String",
      "Default": "db.t3.medium",
      "Description": "RDS instance type",
      "AllowedValues": ["db.t3.micro", "db.t3.small", "db.t3.medium", "db.t3.large"]
    },
    "DatabaseAllocatedStorage": {
      "Type": "Number",
      "Default": 20,
      "Description": "RDS allocated storage in GB",
      "MinValue": 20,
      "MaxValue": 1000
    },
    "KeyPairName": {
      "Type": "String",
      "Description": "Name of an existing EC2 key pair for SSH access"
    },
    "SSHLocation": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "IP address range that can SSH to EC2 instances"
    },
    "WebServerCount": {
      "Type": "Number",
      "Default": 2,
      "Description": "Number of EC2 instances to launch",
      "MinValue": 1,
      "MaxValue": 10
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-VPC" }
          }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": "" }] },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-PublicSubnet1" }
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": "" }] },
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-PublicSubnet2" }
          }
        ]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.11.0/24",
        "AvailabilityZone": { "Fn::Select": ["0", { "Fn::GetAZs": "" }] },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-PrivateSubnet1" }
          }
        ]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "CidrBlock": "10.0.12.0/24",
        "AvailabilityZone": { "Fn::Select": ["1", { "Fn::GetAZs": "" }] },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-PrivateSubnet2" }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-IGW" }
          }
        ]
      }
    },
    "InternetGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-PublicRouteTable" }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "InternetGatewayAttachment",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for web servers",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": { "Ref": "SSHLocation" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-WebServerSG" }
          }
        ]
      }
    },
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for application load balancer",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-ALBSG" }
          }
        ]
      }
    },
    "DatabaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for RDS database",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "SourceSecurityGroupId": { "Ref": "WebServerSecurityGroup" }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-DBSG" }
          }
        ]
      }
    },
    "WebServerLaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": { "Fn::Sub": "${EnvironmentName}-WebServerLaunchTemplate" },
        "VersionDescription": "Initial version",
        "LaunchTemplateData": {
          "ImageId": { "Fn::FindInMap": ["AWSRegionToAMI", { "Ref": "AWS::Region" }, "AMI"] },
          "InstanceType": { "Ref": "InstanceType" },
          "KeyName": { "Ref": "KeyPairName" },
          "SecurityGroupIds": [{ "Ref": "WebServerSecurityGroup" }],
          "UserData": {
            "Fn::Base64": {
              "Fn::Sub": "#!/bin/bash -xe\nyum update -y\nyum install -y httpd\nsystemctl start httpd\nsystemctl enable httpd\necho '<html><body><h1>Hello from EC2 instance!</h1></body></html>' > /var/www/html/index.html\n"
            }
          },
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/xvda",
              "Ebs": {
                "VolumeSize": 30,
                "VolumeType": "gp3",
                "DeleteOnTermination": true
              }
            }
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": { "Fn::Sub": "${EnvironmentName}-WebServer" }
                }
              ]
            }
          ]
        }
      }
    },
    "WebServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": { "Fn::Sub": "${EnvironmentName}-WebServerASG" },
        "DesiredCapacity": { "Ref": "WebServerCount" },
        "MinSize": 1,
        "MaxSize": 10,
        "LaunchTemplate": {
          "LaunchTemplateId": { "Ref": "WebServerLaunchTemplate" },
          "Version": { "Fn::GetAtt": ["WebServerLaunchTemplate", "LatestVersionNumber"] }
        },
        "VPCZoneIdentifier": [
          { "Ref": "PublicSubnet1" },
          { "Ref": "PublicSubnet2" }
        ],
        "TargetGroupARNs": [{ "Ref": "WebServerTargetGroup" }],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 300,
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-WebServer" },
            "PropagateAtLaunch": true
          }
        ]
      }
    },
    "WebServerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": { "Fn::Sub": "${EnvironmentName}-WebServerTG" },
        "Port": 80,
        "Protocol": "HTTP",
        "VpcId": { "Ref": "VPC" },
        "HealthCheckPath": "/",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthCheckIntervalSeconds": 30,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 5,
        "Matcher": {
          "HttpCode": "200"
        },
        "TargetType": "instance"
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": { "Fn::Sub": "${EnvironmentName}-ALB" },
        "Scheme": "internet-facing",
        "LoadBalancerAttributes": [
          {
            "Key": "idle_timeout.timeout_seconds",
            "Value": "60"
          }
        ],
        "Subnets": [
          { "Ref": "PublicSubnet1" },
          { "Ref": "PublicSubnet2" }
        ],
        "SecurityGroups": [{ "Ref": "LoadBalancerSecurityGroup" }],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-ALB" }
          }
        ]
      }
    },
    "HttpListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "WebServerTargetGroup" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for RDS database",
        "SubnetIds": [
          { "Ref": "PrivateSubnet1" },
          { "Ref": "PrivateSubnet2" }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-DBSubnetGroup" }
          }
        ]
      }
    },
    "DatabaseInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": { "Ref": "DatabaseAllocatedStorage" },
        "DBInstanceClass": { "Ref": "DatabaseInstanceType" },
        "DBName": "webappdb",
        "Engine": "mysql",
        "EngineVersion": "8.0",
        "MasterUsername": "admin",
        "MasterUserPassword": "Password123!",
        "MultiAZ": true,
        "StorageType": "gp2",
        "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
        "VPCSecurityGroups": [{ "Ref": "DatabaseSecurityGroup" }],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-Database" }
          }
        ]
      }
    },
    "AssetsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
              "AllowedOrigins": ["*"],
              "MaxAge": 3000
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "TransitionToStandardIA",
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "STANDARD_IA",
                  "TransitionInDays": 30
                }
              ]
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-AssetsBucket" }
          }
        ]
      }
    },
    "LogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "DeleteOldLogs",
              "Status": "Enabled",
              "ExpirationInDays": 90
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Fn::Sub": "${EnvironmentName}-LogsBucket" }
          }
        ]
      }
    }
  },
  "Mappings": {
    "AWSRegionToAMI": {
      "us-east-1": { "AMI": "ami-0c02fb55956c7d316" },
      "us-east-2": { "AMI": "ami-05edbb8e25e281608" },
      "us-west-1": { "AMI": "ami-04d1dcfb793f6fa37" },
      "us-west-2": { "AMI": "ami-00ee4df451840fa9d" },
      "eu-west-1": { "AMI": "ami-0ea0f26a6d50850c5" },
      "eu-central-1": { "AMI": "ami-076309742d466ad69" },
      "ap-northeast-1": { "AMI": "ami-01748a72bed07727c" },
      "ap-southeast-1": { "AMI": "ami-0753e0e42b20e96e3" }
    }
  },
  "Outputs": {
    "LoadBalancerDNSName": {
      "Description": "DNS name of the application load balancer",
      "Value": { "Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"] }
    },
    "DatabaseEndpoint": {
      "Description": "Endpoint of the RDS database instance",
      "Value": { "Fn::GetAtt": ["DatabaseInstance", "Endpoint.Address"] }
    },
    "AssetsBucketName": {
      "Description": "Name of the S3 bucket for assets",
      "Value": { "Ref": "AssetsBucket" }
    }
  }
} 
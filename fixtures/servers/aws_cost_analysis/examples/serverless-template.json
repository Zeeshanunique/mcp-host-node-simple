{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Serverless Web Application Stack",
  "Parameters": {
    "StageName": {
      "Type": "String",
      "Default": "prod",
      "Description": "API Gateway stage name"
    },
    "LambdaMemory": {
      "Type": "Number",
      "Default": 256,
      "Description": "Lambda function memory in MB",
      "MinValue": 128,
      "MaxValue": 10240
    },
    "TableReadCapacity": {
      "Type": "Number",
      "Default": 5,
      "Description": "DynamoDB read capacity units"
    },
    "TableWriteCapacity": {
      "Type": "Number",
      "Default": 5,
      "Description": "DynamoDB write capacity units"
    }
  },
  "Resources": {
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "ServerlessAPI",
        "Description": "API for serverless application",
        "EndpointConfiguration": {
          "Types": ["REGIONAL"]
        }
      }
    },
    "ApiGatewayRootMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "ANY",
        "ResourceId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
        "RestApiId": { "Ref": "ApiGateway" },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambdaFunction.Arn}/invocations"
          }
        }
      }
    },
    "ApiGatewayItemsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
        "PathPart": "items",
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayItemsMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "ResourceId": { "Ref": "ApiGatewayItemsResource" },
        "RestApiId": { "Ref": "ApiGateway" },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemsFunction.Arn}/invocations"
          }
        }
      }
    },
    "ApiGatewayDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["ApiGatewayRootMethod", "ApiGatewayItemsMethod"],
      "Properties": {
        "RestApiId": { "Ref": "ApiGateway" },
        "StageName": { "Ref": "StageName" }
      }
    },
    "ApiLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => { return { statusCode: 200, body: JSON.stringify({ message: 'Hello from Lambda!' }) }; };"
        },
        "FunctionName": "ApiHandler",
        "Handler": "index.handler",
        "MemorySize": { "Ref": "LambdaMemory" },
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "TABLE_NAME": { "Ref": "DynamoDBTable" },
            "BUCKET_NAME": { "Ref": "ContentBucket" }
          }
        }
      }
    },
    "GetItemsFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => { return { statusCode: 200, body: JSON.stringify({ items: ['item1', 'item2', 'item3'] }) }; };"
        },
        "FunctionName": "GetItemsHandler",
        "Handler": "index.handler",
        "MemorySize": { "Ref": "LambdaMemory" },
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
        "Runtime": "nodejs14.x",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "TABLE_NAME": { "Ref": "DynamoDBTable" }
          }
        }
      }
    },
    "LambdaApiGatewayInvoke": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiLambdaFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
        }
      }
    },
    "GetItemsLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "GetItemsFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*"
        }
      }
    },
    "DynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "ItemsTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "TableReadCapacity" },
          "WriteCapacityUnits": { "Ref": "TableWriteCapacity" }
        }
      }
    },
    "ContentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
              "AllowedOrigins": ["*"],
              "MaxAge": 3000
            }
          ]
        },
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "TransitionToGlacierAfter30Days",
              "Status": "Enabled",
              "Transitions": [
                {
                  "StorageClass": "GLACIER",
                  "TransitionInDays": 30
                }
              ]
            }
          ]
        }
      }
    },
    "LogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "DeleteOldLogs",
              "Status": "Enabled",
              "ExpirationInDays": 90
            }
          ]
        }
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "DynamoDBAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": {
                    "Fn::GetAtt": ["DynamoDBTable", "Arn"]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    { "Fn::Sub": "arn:aws:s3:::${ContentBucket}" },
                    { "Fn::Sub": "arn:aws:s3:::${ContentBucket}/*" }
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ApiEndpoint": {
      "Description": "API Endpoint URL",
      "Value": {
        "Fn::Sub": "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
      }
    },
    "ContentBucketName": {
      "Description": "Name of the content S3 bucket",
      "Value": { "Ref": "ContentBucket" }
    },
    "DynamoDBTableName": {
      "Description": "Name of the DynamoDB table",
      "Value": { "Ref": "DynamoDBTable" }
    }
  }
} 